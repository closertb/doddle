const webpack = require('webpack');
const chalk = require('chalk');
const fs = require('fs-extra');
const formatWebpackMessages = require('../config/formatWebpackMessages');
const configFactory = require('../config/webpack.config');
const paths = require('../config/paths');
function createCompiler(config) {
  // "Compiler" is a low-level interface to Webpack.
  // It lets us listen to some events and provide our own custom messages.
  let compiler;
  try {
    compiler = webpack(config);
  } catch (err) {
    console.log(chalk.red('Failed to compile.'));
    console.log();
    console.log(err.message || err);
    console.log();
    process.exit(1);
  }
  return compiler;
}

// Create a webpack compiler that is configured with custom messages.
// Load proxy config
// const proxySetting = require(paths.appPackageJson).proxy;
// const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
// Serve webpack assets generated by the compiler over a web server.
/* const serverConfig = createDevServerConfig(
  proxyConfig,
  urls.lanUrlForConfig
); */

// Create the production build and print the deployment instructions.
function build(nodeEnv) {
  const config = configFactory(nodeEnv, false);
  console.log('Creating an optimized production build...');
  // Remove all content but keep the directory so that
  // if you're in it, you don't end up in Trash
  fs.emptyDirSync(paths.output);
  console.log(`step 1: clean dist content ${chalk.red('success')}`);
  const compiler = createCompiler(config);
  return new Promise((resolve, reject) => {
    compiler.run((err, stats) => {
      let messages;
      if (err) {
        if (!err.message) {
          return reject(err);
        }
        messages = formatWebpackMessages({
          errors: [err.message],
          warnings: [],
        });
      } else {
        messages = formatWebpackMessages(
          stats.toJson({ all: false, warnings: true, errors: true })
        );
      }
      if (messages.errors.length) {
        // Only keep the first error. Others are often indicative
        // of the same problem, but confuse the reader with noise.
        if (messages.errors.length > 1) {
          messages.errors.length = 1;
        }
        return reject(new Error(messages.errors.join('\n\n')));
      }
      /* if (
        process.env.CI &&
        (typeof process.env.CI !== 'string' ||
          process.env.CI.toLowerCase() !== 'false') &&
        messages.warnings.length
      ) {
        console.log(
          chalk.yellow(
            '\nTreating warnings as errors because process.env.CI = true.\n' +
              'Most CI servers set it automatically.\n'
          )
        );
        return reject(new Error(messages.warnings.join('\n\n')));
      } */

      return resolve({
        stats,
        warnings: messages.warnings,
      });
    });
  });
}
module.exports = {
  createCompiler,
  build,
};
